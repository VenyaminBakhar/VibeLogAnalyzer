package com.loganalyzer.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.loganalyzer.model.LogEntry;
import com.loganalyzer.model.LogPattern;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class DeepSeekService {

    private static final Logger logger = LoggerFactory.getLogger(DeepSeekService.class);
    private static final String DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions";

    @Autowired
    private WebClient.Builder webClientBuilder;

    @Autowired
    private ObjectMapper objectMapper;

    // Step 1: Generate SQL query from user request
    public String generateSqlQuery(String userQuery, List<LogPattern> patterns, String apiKey) {
        String prompt = buildSqlGenerationPrompt(userQuery, patterns);
        
        try {
            String response = callDeepSeekApi(prompt, apiKey);
            return extractSqlFromResponse(response);
        } catch (Exception e) {
            logger.error("Error generating SQL query", e);
            throw new RuntimeException("Failed to generate SQL query: " + e.getMessage());
        }
    }

    // Step 2: Analyze logs and provide textual analysis
    public String analyzeLogs(String userQuery, List<LogEntry> logs, String apiKey) {
        String prompt = buildLogAnalysisPrompt(userQuery, logs);
        
        try {
            String response = callDeepSeekApi(prompt, apiKey);
            return extractAnalysisFromResponse(response);
        } catch (Exception e) {
            logger.error("Error analyzing logs", e);
            throw new RuntimeException("Failed to analyze logs: " + e.getMessage());
        }
    }

    private String buildSqlGenerationPrompt(String userQuery, List<LogPattern> patterns) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("–¢—ã ‚Äî —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL‚Äë–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö H2 (mode=PostgreSQL) —Å –±–æ–ª—å—à–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º –∏ –∏—Ö –ª–æ–≥–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö sql –∑–∞–ø—Ä–æ—Å–æ–≤.\n");
        prompt.append("–í —Ç–∞–±–ª–∏—Ü–µ log_entries —Ö—Ä–∞–Ω—è—Ç—Å—è –∂—É—Ä–Ω–∞–ª—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.\n");
        prompt.append("üéØ –ó–∞–¥–∞—á–∞\n\n");
        prompt.append("–ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL‚Äë–∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–π–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤.\n\n");
        prompt.append("–ü—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ç—ã –æ–±—è–∑–∞–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ª–æ–≥–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã.\n");
        
        prompt.append("üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã log_entries\n");
        prompt.append("id BIGINT,\n");
        prompt.append("timestamp TIMESTAMP,\n");
        prompt.append("log_level VARCHAR,\n");
        prompt.append("message VARCHAR\n\n");
        
        prompt.append("üîë –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è SQL\n\n");
        prompt.append("1. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω—ã\n\n");
        prompt.append("    –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ —à–∞–±–ª–æ–Ω—ã –ª–æ–≥–æ–≤.\n");
        prompt.append("    –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ —Ç–∏–ø—ã —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ —Å–æ–±—ã—Ç–∏–π —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: userId, requestId, userName, email, sessionId, ipAddress, \"login\", \"send message\", \"error\").\n");
        prompt.append("    –ü–æ–π–º–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ª–æ–≥–∞–º–∏: –∫–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è —è–≤–ª—è—é—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω—ã–º–∏, –∫–∞–∫–∏–µ –∫–æ–Ω–µ—á–Ω—ã–º–∏, –∏ –∫–∞–∫ –æ–Ω–∏ —Å–≤—è–∑–∞–Ω—ã —á–µ—Ä–µ–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã.\n\n");
        
        prompt.append("2. –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞\n\n");
        prompt.append("    –†–∞–∑–±–µ—Ä–∏, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n");
        prompt.append("    –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —Ü–µ–ª–µ–≤—ã–µ –ª–æ–≥–∏ –ø–æ–º–æ–≥—É—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å.\n");
        prompt.append("    –ï—Å–ª–∏ –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç ‚Üí –æ–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –ª–æ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å —Å —Ü–µ–ª–µ–≤—ã–º–∏ (—á–µ—Ä–µ–∑ requestId, id, sessionId –∏ —Ç.–ø.).\n\n");
        
        prompt.append("3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ü–µ–ª–µ–≤—ã–º –ª–æ–≥–∞–º\n\n");
        prompt.append("    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Üí —Å—Ç—Ä–æ–π SQL —Å—Ä–∞–∑—É –∫ —Ü–µ–ª–µ–≤—ã–º –ª–æ–≥–∞–º.\n");
        prompt.append("    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Üí —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ—Å—Ç–∞–Ω—å requestId –ø–æ userId), –∑–∞—Ç–µ–º –Ω–∞–π–¥–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ —á–µ—Ä–µ–∑ WITH ‚Ä¶.\n\n");
        
        prompt.append("4. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ SQL‚Äë–∑–∞–ø—Ä–æ—Å–∞\n\n");
        prompt.append("    –ï—Å–ª–∏ –º–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π ILIKE.\n");
        prompt.append("    –î–ª—è —Ü–µ–ø–æ—á–µ–∫ —Å–æ–±—ã—Ç–∏–π ‚Üí —Å—Ç—Ä–æ–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ WITH ‚Ä¶.\n");
        prompt.append("    –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏–∏ H2:\n");
        prompt.append("        REGEXP_SUBSTR(message, 'pattern', 1, 1, '', group)\n");
        prompt.append("        REGEXP_REPLACE(...) –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.\n");
        prompt.append("    –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ message, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã–µ –ø–æ–ª—è.\n\n");
        
        prompt.append("5. –í–∞–ª–∏–¥–∞—Ü–∏—è SQL\n\n");
        prompt.append("    –ü—Ä–æ–≤–µ—Ä—è–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–º–µ–Ω–Ω–æ –¥–ª—è H2 (mode=PostgreSQL).\n");
        prompt.append("    –£—á–∏—Ç—ã–≤–∞–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ILIKE –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∞ substring with regex ‚Äî –Ω–µ—Ç (—Ç–æ–ª—å–∫–æ REGEXP_SUBSTR).\n");
        prompt.append("    –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π JOIN –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º.\n\n");
        
        prompt.append("6. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SQL\n\n");
        prompt.append("    –£–±–∏—Ä–∞–π –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —É—Å–ª–æ–≤–∏—è.\n");
        prompt.append("    –ò—Å–∫–ª—é—á–∞–π –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã.\n");
        prompt.append("    –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –∞ –Ω–µ —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω.\n\n");
        
        prompt.append("üîé –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ SQL\n\n");
        prompt.append("    –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n");
        prompt.append("SELECT id, timestamp, log_level, message\n");
        prompt.append("FROM log_entries\n");
        prompt.append("...\n");
        prompt.append("ORDER BY timestamp DESC;\n\n");
        
        prompt.append("    –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π.\n");
        prompt.append("    –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–≤—è–∑–µ–π –∏—Å–ø–æ–ª—å–∑—É–π WITH ‚Ä¶.\n");
        prompt.append("    –î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞ ‚Üí ILIKE.\n");
        prompt.append("    –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ ‚Üí IN.\n");
        prompt.append("    –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π ‚Üí —Ç–æ–ª—å–∫–æ REGEXP_SUBSTR.\n\n");
        
        prompt.append("–ü—Ä–∏–º–µ—Ä—ã:\n");
        prompt.append(" –ü—Ä–∏–º–µ—Ä 1. –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ id\n\n");
        prompt.append("–®–∞–±–ª–æ–Ω—ã Java:\n");
        prompt.append("logger.info(\"start send message for userName={} and id={}\", user.getName(), user.getId());\n");
        prompt.append("logger.info(\"created message for userName={} and id={}\", user.getName(), user.getId());\n");
        prompt.append("logger.info(\"system healthcheck. status=working\");\n");
        prompt.append("logger.info(\"message send completed for id={}\", user.getId());\n");
        prompt.append("logger.error(\"message send failed for id={}\", user.getId());\n\n");
        prompt.append("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n");
        prompt.append("¬´–û—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id 111?¬ª\n\n");
        prompt.append("–†–∞–∑–±–æ—Ä:\n\n");
        prompt.append("    –í –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π id=111.\n");
        prompt.append("    –®–∞–±–ª–æ–Ω –ª–æ–≥–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ id –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä—è–º–æ –≤ message.\n");
        prompt.append("    –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–∫–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —à–∞–≥–∏. –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ.\n\n");
        prompt.append("–§–∏–Ω–∞–ª—å–Ω—ã–π SQL:\n");
        prompt.append("SELECT id, timestamp, log_level, message\n");
        prompt.append("FROM log_entries\n");
        prompt.append("WHERE message ILIKE '%id=111%'\n");
        prompt.append("ORDER BY timestamp DESC;\n\n");
        
        prompt.append("–ü—Ä–∏–º–µ—Ä 2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ requestId\n\n");
        prompt.append("–®–∞–±–ª–æ–Ω—ã Java:\n");
        prompt.append("logger.info(\"start send message. userId={}, requestId={}\", user.getId(), requestId);\n");
        prompt.append("logger.info(\"send completed success. requestId={}\", requestId);\n");
        prompt.append("logger.warn(\"send failed. requestId={}\", requestId);\n\n");
        prompt.append("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n");
        prompt.append("¬´–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å userId=abc-123-uuid?¬ª\n\n");
        prompt.append("–†–∞–∑–±–æ—Ä:\n\n");
        prompt.append("    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ userId.\n");
        prompt.append("    –ù–æ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ª–æ–≥–∞—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ (send completed success –∏–ª–∏ send failed) userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–∞–º –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ requestId.\n");
        prompt.append("    –ó–Ω–∞—á–∏—Ç, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ requestId –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ userId.\n");
        prompt.append("    –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ ‚Äî –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É requestId –¥–æ—Å—Ç–∞—Ç—å –ª–æ–≥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.\n");
        prompt.append("    –î–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç CTE (WITH ‚Ä¶).\n\n");
        prompt.append("–§–∏–Ω–∞–ª—å–Ω—ã–π SQL:\n");
        prompt.append("WITH request_ids AS (\n");
        prompt.append("  SELECT REGEXP_SUBSTR(message, 'requestId=([^ ]+)', 1, 1, '', 1) AS requestId\n");
        prompt.append("  FROM log_entries\n");
        prompt.append("  WHERE message ILIKE '%start send message. userid=abc-123-uuid%'\n");
        prompt.append(")\n");
        prompt.append("SELECT l.id, l.timestamp, l.log_level, l.message\n");
        prompt.append("FROM log_entries l\n");
        prompt.append("JOIN request_ids r ON l.message LIKE '%' || r.requestId || '%'\n");
        prompt.append("WHERE l.message ILIKE '%send completed success.%'\n");
        prompt.append("   OR l.message ILIKE '%send failed.%'\n");
        prompt.append("   OR l.message ILIKE '%start send message.%'\n");
        prompt.append("ORDER BY l.timestamp DESC;\n\n");
        
        prompt.append("–ü—Ä–∏–º–µ—Ä 3. –ü–æ–∏—Å–∫ –ª–æ–≥–æ–≤ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ IP\n\n");
        prompt.append("–®–∞–±–ª–æ–Ω—ã JAVA:\n");
        prompt.append("logger.info(\"User {} logged in from {}\", user.getName(), ipAddress);\n");
        prompt.append("logger.error(\"Database connection failed: {}\", ex.getCause());\n");
        prompt.append("logger.warn(\"High memory usage detected: {}%\", memoryPercent);\n\n");
        prompt.append("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n");
        prompt.append("¬´what john_doe log ip?¬ª\n\n");
        prompt.append("–†–∞–∑–±–æ—Ä:\n\n");
        prompt.append("    –í –∑–∞–ø—Ä–æ—Å–µ —É–∫–∞–∑–∞–Ω —é–∑–µ—Ä john_doe.\n");
        prompt.append("    –í —à–∞–±–ª–æ–Ω–∞—Ö –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞: \"User {} logged in from {}\" ‚Üí –∑–¥–µ—Å—å —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + IP.\n");
        prompt.append("    –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å–∫–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏, –≥–¥–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç User john_doe logged in from.\n");
        prompt.append("    –¶–µ–ª–µ–≤—ã–µ –ø–æ–ª—è (message) —É–∂–µ –≤–∫–ª—é—á–∞—é—Ç IP, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–≤—è–∑–æ–∫ –Ω–µ –Ω—É–∂–Ω–æ.\n\n");
        prompt.append("–§–∏–Ω–∞–ª—å–Ω—ã–π SQL:\n");
        prompt.append("SELECT id, timestamp, log_level, message\n");
        prompt.append("FROM log_entries\n");
        prompt.append("WHERE message ILIKE '%User john_doe logged in from%'\n");
        prompt.append("ORDER BY timestamp DESC;\n\n");
        
        prompt.append("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n");
        prompt.append("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n");
        prompt.append(userQuery).append("\n\n");
        
        prompt.append("–®–∞–±–ª–æ–Ω—ã –ª–æ–≥–æ–≤:\n");
        for (LogPattern pattern : patterns) {
            prompt.append(pattern.getLogTemplate()).append("\n");
        }
        
        return prompt.toString();
    }

    private String buildLogAnalysisPrompt(String userQuery, List<LogEntry> logs) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("–¢—ã ‚Äî senior DevOps –∏–Ω–∂–µ–Ω–µ—Ä —Å –æ–ø—ã—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤.\n");
        prompt.append("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–æ–≥–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n");
        prompt.append("- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏\n");
        prompt.append("- –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏–π\n");
        prompt.append("- –£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏\n");
        prompt.append("- –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –ª–æ–≥–∏ —Ä–µ–∞–ª—å–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã –∑–∞–ø—Ä–æ—Å—É\n\n");
        
        prompt.append("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \"").append(userQuery).append("\"\n\n");
        
        prompt.append("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–æ–≥–∏:\n");
        for (LogEntry log : logs) {
            prompt.append(String.format("[%s] %s: %s\n", 
                log.getTimestamp(), log.getLogLevel(), log.getMessage()));
        }
        
        prompt.append("\n–í–µ—Ä–Ω–∏ JSON: { \"analysis\": \"—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ\", \"relevant_logs\": [–º–∞—Å—Å–∏–≤ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ª–æ–≥–æ–≤] }");
        
        return prompt.toString();
    }

    private String callDeepSeekApi(String prompt, String apiKey) {
        WebClient webClient = webClientBuilder
            .defaultHeader("Authorization", "Bearer " + apiKey)
            .defaultHeader("Content-Type", "application/json")
            .build();

        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("model", "deepseek-chat");
        requestBody.put("messages", List.of(
            Map.of("role", "user", "content", prompt)
        ));
        requestBody.put("max_tokens", 4000);
        requestBody.put("temperature", 0.1);

        try {
            Mono<String> response = webClient.post()
                .uri(DEEPSEEK_API_URL)
                .bodyValue(requestBody)
                .retrieve()
                .bodyToMono(String.class);

            return response.block();
        } catch (Exception e) {
            logger.error("Error calling DeepSeek API", e);
            throw new RuntimeException("Failed to call DeepSeek API: " + e.getMessage());
        }
    }

    private String extractSqlFromResponse(String response) {
        try {
            JsonNode jsonNode = objectMapper.readTree(response);
            String content = jsonNode.path("choices").get(0).path("message").path("content").asText();
            
            // Extract SQL from ```sql blocks
            if (content.contains("```sql")) {
                int start = content.indexOf("```sql") + 6;
                int end = content.indexOf("```", start);
                if (end > start) {
                    return content.substring(start, end).trim();
                }
            }
            
            // If no SQL block found, return the content as is
            return content.trim();
        } catch (Exception e) {
            logger.error("Error extracting SQL from response", e);
            throw new RuntimeException("Failed to extract SQL from response");
        }
    }

    private String extractAnalysisFromResponse(String response) {
        try {
            JsonNode jsonNode = objectMapper.readTree(response);
            String content = jsonNode.path("choices").get(0).path("message").path("content").asText();
            
            // Try to extract JSON analysis
            if (content.contains("{") && content.contains("}")) {
                int start = content.indexOf("{");
                int end = content.lastIndexOf("}") + 1;
                String jsonPart = content.substring(start, end);
                
                JsonNode analysisJson = objectMapper.readTree(jsonPart);
                return analysisJson.path("analysis").asText();
            }
            
            // If no JSON found, return the content as is
            return content;
        } catch (Exception e) {
            logger.error("Error extracting analysis from response", e);
            return response; // Return raw response if parsing fails
        }
    }
}