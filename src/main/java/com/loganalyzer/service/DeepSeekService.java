package com.loganalyzer.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.loganalyzer.model.LogEntry;
import com.loganalyzer.model.LogPattern;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class DeepSeekService {

    private static final Logger logger = LoggerFactory.getLogger(DeepSeekService.class);
    private static final String DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions";

    @Autowired
    private WebClient.Builder webClientBuilder;

    @Autowired
    private ObjectMapper objectMapper;

    // Step 1: Generate SQL query from user request
    public String generateSqlQuery(String userQuery, List<LogPattern> patterns, String apiKey) {
        String prompt = buildSqlGenerationPrompt(userQuery, patterns);
        
        try {
            String response = callDeepSeekApi(prompt, apiKey);
            return extractSqlFromResponse(response);
        } catch (Exception e) {
            logger.error("Error generating SQL query", e);
            throw new RuntimeException("Failed to generate SQL query: " + e.getMessage());
        }
    }

    // Step 2: Analyze logs and provide textual analysis
    public String analyzeLogs(String userQuery, List<LogEntry> logs, String apiKey) {
        String prompt = buildLogAnalysisPrompt(userQuery, logs);
        
        try {
            String response = callDeepSeekApi(prompt, apiKey);
            return extractAnalysisFromResponse(response);
        } catch (Exception e) {
            logger.error("Error analyzing logs", e);
            throw new RuntimeException("Failed to analyze logs: " + e.getMessage());
        }
    }

    private String buildSqlGenerationPrompt(String userQuery, List<LogPattern> patterns) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö H2, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–≥–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ log_entries.\n\n");
        prompt.append("–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É —Å—Ç—Ä–æ–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SQL, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞—Ö –ª–æ–≥–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã.\n\n");
        
        prompt.append("üîë –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è SQL\n\n");
        
        prompt.append("1. –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞\n");
        prompt.append("   ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: userId, requestId, userName, email, sessionId) –∏ –¥–µ–π—Å—Ç–≤–∏—è, –æ –∫–æ—Ç–æ—Ä—ã—Ö —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ª–æ–≥–∏–Ω).\n");
        prompt.append("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –ª–æ–≥–∞—Ö –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–∞–º.\n");
        prompt.append("   ‚Ä¢ –ù–µ –¥–æ–±–∞–≤–ª—è–π —É—Å–ª–æ–≤–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–∞–º, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –≤ –ª–æ–≥–∞—Ö.\n");
        prompt.append("   ‚Ä¢ ‚ùå –ù–µ–ª—å–∑—è: –¥–æ–±–∞–≤–ª—è—Ç—å UPPER(message) LIKE '%ip=%', –µ—Å–ª–∏ –≤ —à–∞–±–ª–æ–Ω–∞—Ö –Ω–µ—Ç ip=.\n");
        prompt.append("   ‚Ä¢ ‚úÖ –ú–æ–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å UPPER(message) LIKE '%logged in from%', –µ—Å–ª–∏ —ç—Ç–æ –µ—Å—Ç—å –≤ —à–∞–±–ª–æ–Ω–µ.\n\n");
        
        prompt.append("2. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –ª–æ–≥–∞–º–∏\n");
        prompt.append("   ‚Ä¢ –ï—Å–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω—É–∂–Ω–æ —Å–≤—è–∑—ã–≤–∞—Ç—å –ª–æ–≥–∏ –ø–æ requestId, id, sessionId, –∏—Å–ø–æ–ª—å–∑—É–π CTE (WITH ‚Ä¶) –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π.\n");
        prompt.append("   ‚Ä¢ –î–ª—è —Å–≤—è–∑–∏ —Ç–∞–±–ª–∏—Ü –≤–Ω—É—Ç—Ä–∏ log_entries –∏—Å–ø–æ–ª—å–∑—É–π JOIN –∏–ª–∏ IN, –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ –¥–∞–Ω–Ω—ã–º, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ —à–∞–±–ª–æ–Ω–∞—Ö.\n");
        prompt.append("   ‚Ä¢ ‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤—ã–¥—É–º—ã–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, transactionId), –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —à–∞–±–ª–æ–Ω–∞—Ö.\n\n");
        
        prompt.append("3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ message\n");
        prompt.append("   ‚Ä¢ –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π H2-—Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ä–µ–≥—ç–∫—Å–ø–∞–º–∏:\n");
        prompt.append("     - REGEXP_SUBSTR(message, '–∫–ª—é—á=([^ ]+)', 1, 1, '', 1)\n");
        prompt.append("     - SUBSTRING(message FROM '–∫–ª—é—á=([^ ]+)')\n");
        prompt.append("   ‚Ä¢ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–∞–∫—Ç—É–π –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏.\n\n");
        
        prompt.append("4. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è\n");
        prompt.append("   ‚Ä¢ –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π UPPER(message) LIKE UPPER('%pattern%') (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π LIKE).\n");
        prompt.append("   ‚Ä¢ –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ‚Äî IN.\n");
        prompt.append("   ‚Ä¢ –î–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ ({} –≤ –∫–æ–¥–µ) –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É %.\n");
        prompt.append("   ‚Ä¢ –í—Å–µ–≥–¥–∞ –æ–ø–∏—Ä–∞–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤.\n\n");
        
        prompt.append("5. –†–µ–∑—É–ª—å—Ç–∞—Ç\n");
        prompt.append("   ‚Ä¢ –í—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏: SELECT id, timestamp, log_level, message\n");
        prompt.append("   ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–π: ORDER BY timestamp DESC;\n\n");
        
        prompt.append("üìñ –ü—Ä–∏–º–µ—Ä—ã\n\n");
        prompt.append("–ü—Ä–∏–º–µ—Ä 1. –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ id\n");
        prompt.append("–®–∞–±–ª–æ–Ω—ã:\n");
        prompt.append("logger.info(\"start send message for userName={} and id={}\", user.getName(), user.getId());\n");
        prompt.append("logger.info(\"message send completed for id={}\", user.getId());\n");
        prompt.append("logger.error(\"message send failed for id={}\", user.getId());\n\n");
        prompt.append("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ¬´–û—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id 111?¬ª\n\n");
        prompt.append("SQL:\n");
        prompt.append("SELECT id, timestamp, log_level, message\n");
        prompt.append("FROM log_entries\n");
        prompt.append("WHERE UPPER(message) LIKE UPPER('%id=111%')\n");
        prompt.append("ORDER BY timestamp DESC;\n\n");
        
        prompt.append("–ü—Ä–∏–º–µ—Ä 2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (—Å–≤—è–∑–∫–∞ —á–µ—Ä–µ–∑ requestId)\n");
        prompt.append("–®–∞–±–ª–æ–Ω—ã:\n");
        prompt.append("logger.info(\"start send message. userId={}, requestId={}\", user.getId(), requestId);\n");
        prompt.append("logger.info(\"send completed success. requestId={}\", requestId);\n");
        prompt.append("logger.warn(\"send failed. requestId={}\", requestId);\n\n");
        prompt.append("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ¬´–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å userId=abc-123-uuid?¬ª\n\n");
        prompt.append("SQL:\n");
        prompt.append("WITH request_ids AS (\n");
        prompt.append("  SELECT REGEXP_SUBSTR(message, 'requestId=([^ ]+)', 1, 1, '', 1) AS requestId\n");
        prompt.append("  FROM log_entries\n");
        prompt.append("  WHERE UPPER(message) LIKE UPPER('%start send message. userid=abc-123-uuid%')\n");
        prompt.append(")\n");
        prompt.append("SELECT l.id, l.timestamp, l.log_level, l.message\n");
        prompt.append("FROM log_entries l\n");
        prompt.append("JOIN request_ids r ON UPPER(l.message) LIKE UPPER('%' || r.requestId || '%')\n");
        prompt.append("WHERE UPPER(l.message) LIKE UPPER('%send completed success.%')\n");
        prompt.append("   OR UPPER(l.message) LIKE UPPER('%send failed.%')\n");
        prompt.append("   OR UPPER(l.message) LIKE UPPER('%start send message.%')\n");
        prompt.append("ORDER BY l.timestamp DESC;\n\n");
        
        prompt.append("üéØ –ò—Ç–æ–≥\n");
        prompt.append("–í—Å–µ–≥–¥–∞:\n");
        prompt.append("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –∏ –∫–ª—é—á–∏ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤.\n");
        prompt.append("‚Ä¢ –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ 1 sql –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ª–æ–≥–∏.\n");
        prompt.append("‚Ä¢ –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã–µ –ø–æ–ª—è.\n");
        prompt.append("‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–π id, timestamp, log_level, message —Å ORDER BY timestamp DESC.\n\n");
        
        prompt.append("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n");
        prompt.append("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã log_entries:\n");
        prompt.append("id BIGINT,\n");
        prompt.append("timestamp TIMESTAMP,\n");
        prompt.append("log_level VARCHAR,\n");
        prompt.append("message VARCHAR\n\n");
        
        prompt.append("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n");
        prompt.append(userQuery).append("\n\n");
        
        prompt.append("–®–∞–±–ª–æ–Ω—ã –ª–æ–≥–æ–≤ –∏–∑ –∫–æ–¥–∞:\n");
        for (LogPattern pattern : patterns) {
            prompt.append(pattern.getLogTemplate()).append("\n");
        }
        
        return prompt.toString();
    }

    private String buildLogAnalysisPrompt(String userQuery, List<LogEntry> logs) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("–¢—ã ‚Äî senior DevOps –∏–Ω–∂–µ–Ω–µ—Ä —Å –æ–ø—ã—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤.\n");
        prompt.append("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–æ–≥–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n");
        prompt.append("- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏\n");
        prompt.append("- –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏–π\n");
        prompt.append("- –£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏\n");
        prompt.append("- –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –ª–æ–≥–∏ —Ä–µ–∞–ª—å–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã –∑–∞–ø—Ä–æ—Å—É\n\n");
        
        prompt.append("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \"").append(userQuery).append("\"\n\n");
        
        prompt.append("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–æ–≥–∏:\n");
        for (LogEntry log : logs) {
            prompt.append(String.format("[%s] %s: %s\n", 
                log.getTimestamp(), log.getLogLevel(), log.getMessage()));
        }
        
        prompt.append("\n–í–µ—Ä–Ω–∏ JSON: { \"analysis\": \"—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ\", \"relevant_logs\": [–º–∞—Å—Å–∏–≤ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ª–æ–≥–æ–≤] }");
        
        return prompt.toString();
    }

    private String callDeepSeekApi(String prompt, String apiKey) {
        WebClient webClient = webClientBuilder
            .defaultHeader("Authorization", "Bearer " + apiKey)
            .defaultHeader("Content-Type", "application/json")
            .build();

        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("model", "deepseek-chat");
        requestBody.put("messages", List.of(
            Map.of("role", "user", "content", prompt)
        ));
        requestBody.put("max_tokens", 4000);
        requestBody.put("temperature", 0.1);

        try {
            Mono<String> response = webClient.post()
                .uri(DEEPSEEK_API_URL)
                .bodyValue(requestBody)
                .retrieve()
                .bodyToMono(String.class);

            return response.block();
        } catch (Exception e) {
            logger.error("Error calling DeepSeek API", e);
            throw new RuntimeException("Failed to call DeepSeek API: " + e.getMessage());
        }
    }

    private String extractSqlFromResponse(String response) {
        try {
            JsonNode jsonNode = objectMapper.readTree(response);
            String content = jsonNode.path("choices").get(0).path("message").path("content").asText();
            
            // Extract SQL from ```sql blocks
            if (content.contains("```sql")) {
                int start = content.indexOf("```sql") + 6;
                int end = content.indexOf("```", start);
                if (end > start) {
                    return content.substring(start, end).trim();
                }
            }
            
            // If no SQL block found, return the content as is
            return content.trim();
        } catch (Exception e) {
            logger.error("Error extracting SQL from response", e);
            throw new RuntimeException("Failed to extract SQL from response");
        }
    }

    private String extractAnalysisFromResponse(String response) {
        try {
            JsonNode jsonNode = objectMapper.readTree(response);
            String content = jsonNode.path("choices").get(0).path("message").path("content").asText();
            
            // Try to extract JSON analysis
            if (content.contains("{") && content.contains("}")) {
                int start = content.indexOf("{");
                int end = content.lastIndexOf("}") + 1;
                String jsonPart = content.substring(start, end);
                
                JsonNode analysisJson = objectMapper.readTree(jsonPart);
                return analysisJson.path("analysis").asText();
            }
            
            // If no JSON found, return the content as is
            return content;
        } catch (Exception e) {
            logger.error("Error extracting analysis from response", e);
            return response; // Return raw response if parsing fails
        }
    }
}