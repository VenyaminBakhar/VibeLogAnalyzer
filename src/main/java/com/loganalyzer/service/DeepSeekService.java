package com.loganalyzer.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.loganalyzer.model.LogEntry;
import com.loganalyzer.model.LogPattern;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class DeepSeekService {

    private static final Logger logger = LoggerFactory.getLogger(DeepSeekService.class);
    private static final String DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions";

    @Autowired
    private WebClient.Builder webClientBuilder;

    @Autowired
    private ObjectMapper objectMapper;

    // Step 1: Generate SQL query from user request
    public String generateSqlQuery(String userQuery, List<LogPattern> patterns, String apiKey) {
        String prompt = buildSqlGenerationPrompt(userQuery, patterns);
        
        try {
            String response = callDeepSeekApi(prompt, apiKey);
            return extractSqlFromResponse(response);
        } catch (Exception e) {
            logger.error("Error generating SQL query", e);
            throw new RuntimeException("Failed to generate SQL query: " + e.getMessage());
        }
    }

    // Step 2: Analyze logs and provide textual analysis
    public String analyzeLogs(String userQuery, List<LogEntry> logs, String apiKey) {
        String prompt = buildLogAnalysisPrompt(userQuery, logs);
        
        try {
            String response = callDeepSeekApi(prompt, apiKey);
            return extractAnalysisFromResponse(response);
        } catch (Exception e) {
            logger.error("Error analyzing logs", e);
            throw new RuntimeException("Failed to analyze logs: " + e.getMessage());
        }
    }

    private String buildSqlGenerationPrompt(String userQuery, List<LogPattern> patterns) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö H2, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–≥–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ log_entries.\n\n");
        prompt.append("–¢–µ–±–µ –¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã log_entries –∏ —à–∞–±–ª–æ–Ω—ã –ª–æ–≥–æ–≤ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞.\n");
        prompt.append("–ù–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ª–æ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å.\n");
        prompt.append("–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å –í–°–ï —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ª–æ–≥–æ–≤: —É—Å–ø–µ—à–Ω—ã–µ, –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É.\n\n");
        
        prompt.append("### üîë –ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è SQL:\n\n");
        prompt.append("1. **–ü–æ—à–∞–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞**\n");
        prompt.append("   - –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: userId, requestId, userName, email, sessionId –∏ —Ç.–¥.) –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è).\n");
        prompt.append("   - –£—á—Ç–∏, —á—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏, UUID, email-–∞–¥—Ä–µ—Å–∞–º–∏, —á–∏—Å–ª–∞–º–∏ –∏ —Ç.–¥.\n\n");
        
        prompt.append("2. **–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –ª–æ–≥–∞–º–∏**\n");
        prompt.append("   - –ï—Å–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ü–µ–ª–µ–≤—ã–º –ª–æ–≥–∞–º –Ω—É–∂–Ω—ã –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ requestId –ø–æ userId), –∏—Å–ø–æ–ª—å–∑—É–π CTE (`WITH ‚Ä¶ AS`).\n");
        prompt.append("   - –î–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π `JOIN` –∏–ª–∏ `IN`.\n\n");
        
        prompt.append("3. **–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ messages**\n");
        prompt.append("   - –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º H2-—Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ä–µ–≥—É–ª—è—Ä–∫–∞–º–∏:\n");
        prompt.append("     - `REGEXP_SUBSTR(message, '–∫–ª—é—á=([^ ]+)', 1, 1, '', 1)`\n");
        prompt.append("     - –∏–ª–∏ `SUBSTRING(message FROM '–∫–ª—é—á=([^ ]+)')`\n");
        prompt.append("   - –í—Å–µ–≥–¥–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫—É.\n\n");
        
        prompt.append("4. **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è**\n");
        prompt.append("   - –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫: `UPPER(message) LIKE UPPER('%pattern%')` (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫).\n");
        prompt.append("   - –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: `IN`.\n");
        prompt.append("   - –í –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞—Ö –∏–∑ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `%` –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.\n\n");
        
        prompt.append("5. **–†–µ–∑—É–ª—å—Ç–∞—Ç**\n");
        prompt.append("   - –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π `id, timestamp, log_level, message`.\n");
        prompt.append("   - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–π:\n");
        prompt.append("     - `ORDER BY timestamp DESC`\n");
        prompt.append("     - `LIMIT 1000`\n");
        prompt.append("   - –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—É `log_entries`.\n\n");
        
        prompt.append("### üìñ –ü—Ä–∏–º–µ—Ä—ã\n\n");
        prompt.append("#### –ü—Ä–∏–º–µ—Ä 1 (–ø—Ä–æ—Å—Ç–æ–π)\n");
        prompt.append("–ó–∞–ø—Ä–æ—Å: ¬´–û—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id 111?¬ª\n");
        prompt.append("```sql\n");
        prompt.append("SELECT id, timestamp, log_level, message\n");
        prompt.append("FROM log_entries\n");
        prompt.append("WHERE UPPER(message) LIKE UPPER('%id=111%')\n");
        prompt.append("ORDER BY timestamp DESC\n");
        prompt.append("LIMIT 1000;\n");
        prompt.append("```\n\n");
        
        prompt.append("#### –ü—Ä–∏–º–µ—Ä 2 (—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é)\n");
        prompt.append("–ó–∞–ø—Ä–æ—Å: ¬´–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å userId=abc-123-uuid?¬ª\n");
        prompt.append("```sql\n");
        prompt.append("WITH request_ids AS (\n");
        prompt.append("    SELECT REGEXP_SUBSTR(message, 'requestId=([^ ]+)', 1, 1, '', 1) AS requestId\n");
        prompt.append("    FROM log_entries\n");
        prompt.append("    WHERE UPPER(message) LIKE UPPER('%start send message. userid=abc-123-uuid%')\n");
        prompt.append(")\n");
        prompt.append("SELECT l.id, l.timestamp, l.log_level, l.message\n");
        prompt.append("FROM log_entries l\n");
        prompt.append("JOIN request_ids r ON UPPER(l.message) LIKE UPPER('%' || r.requestId || '%')\n");
        prompt.append("WHERE UPPER(l.message) LIKE UPPER('%send completed success.%')\n");
        prompt.append("   OR UPPER(l.message) LIKE UPPER('%send failed.%')\n");
        prompt.append("   OR UPPER(l.message) LIKE UPPER('%start send message.%')\n");
        prompt.append("ORDER BY l.timestamp DESC\n");
        prompt.append("LIMIT 1000;\n");
        prompt.append("```\n\n");
        
        prompt.append("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã log_entries:\n");
        prompt.append("id BIGINT,\n");
        prompt.append("timestamp TIMESTAMP,\n");
        prompt.append("log_level VARCHAR,\n");
        prompt.append("message VARCHAR\n\n");
        
        prompt.append("–®–∞–±–ª–æ–Ω—ã –ª–æ–≥–æ–≤ –∏–∑ –∫–æ–¥–∞:\n");
        for (LogPattern pattern : patterns) {
            prompt.append(pattern.getLogTemplate()).append("\n");
        }
        
        prompt.append("\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n");
        prompt.append("\"").append(userQuery).append("\"");
        prompt.append("\n\n–û—Å–æ–±—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n");
        prompt.append("–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ sql –∑–∞–ø—Ä–æ—Å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤");
        
        return prompt.toString();
    }

    private String buildLogAnalysisPrompt(String userQuery, List<LogEntry> logs) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("–¢—ã ‚Äî senior DevOps –∏–Ω–∂–µ–Ω–µ—Ä —Å –æ–ø—ã—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤.\n");
        prompt.append("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–æ–≥–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n");
        prompt.append("- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏\n");
        prompt.append("- –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏–π\n");
        prompt.append("- –£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏\n");
        prompt.append("- –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –ª–æ–≥–∏ —Ä–µ–∞–ª—å–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã –∑–∞–ø—Ä–æ—Å—É\n\n");
        
        prompt.append("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \"").append(userQuery).append("\"\n\n");
        
        prompt.append("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–æ–≥–∏:\n");
        for (LogEntry log : logs) {
            prompt.append(String.format("[%s] %s: %s\n", 
                log.getTimestamp(), log.getLogLevel(), log.getMessage()));
        }
        
        prompt.append("\n–í–µ—Ä–Ω–∏ JSON: { \"analysis\": \"—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ\", \"relevant_logs\": [–º–∞—Å—Å–∏–≤ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ª–æ–≥–æ–≤] }");
        
        return prompt.toString();
    }

    private String callDeepSeekApi(String prompt, String apiKey) {
        WebClient webClient = webClientBuilder
            .defaultHeader("Authorization", "Bearer " + apiKey)
            .defaultHeader("Content-Type", "application/json")
            .build();

        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("model", "deepseek-chat");
        requestBody.put("messages", List.of(
            Map.of("role", "user", "content", prompt)
        ));
        requestBody.put("max_tokens", 4000);
        requestBody.put("temperature", 0.1);

        try {
            Mono<String> response = webClient.post()
                .uri(DEEPSEEK_API_URL)
                .bodyValue(requestBody)
                .retrieve()
                .bodyToMono(String.class);

            return response.block();
        } catch (Exception e) {
            logger.error("Error calling DeepSeek API", e);
            throw new RuntimeException("Failed to call DeepSeek API: " + e.getMessage());
        }
    }

    private String extractSqlFromResponse(String response) {
        try {
            JsonNode jsonNode = objectMapper.readTree(response);
            String content = jsonNode.path("choices").get(0).path("message").path("content").asText();
            
            // Extract SQL from ```sql blocks
            if (content.contains("```sql")) {
                int start = content.indexOf("```sql") + 6;
                int end = content.indexOf("```", start);
                if (end > start) {
                    return content.substring(start, end).trim();
                }
            }
            
            // If no SQL block found, return the content as is
            return content.trim();
        } catch (Exception e) {
            logger.error("Error extracting SQL from response", e);
            throw new RuntimeException("Failed to extract SQL from response");
        }
    }

    private String extractAnalysisFromResponse(String response) {
        try {
            JsonNode jsonNode = objectMapper.readTree(response);
            String content = jsonNode.path("choices").get(0).path("message").path("content").asText();
            
            // Try to extract JSON analysis
            if (content.contains("{") && content.contains("}")) {
                int start = content.indexOf("{");
                int end = content.lastIndexOf("}") + 1;
                String jsonPart = content.substring(start, end);
                
                JsonNode analysisJson = objectMapper.readTree(jsonPart);
                return analysisJson.path("analysis").asText();
            }
            
            // If no JSON found, return the content as is
            return content;
        } catch (Exception e) {
            logger.error("Error extracting analysis from response", e);
            return response; // Return raw response if parsing fails
        }
    }
}